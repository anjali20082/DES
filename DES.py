# -*- coding: utf-8 -*-
"""NSAssignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGqZycPv62zRaZEBWuVlCe1jsc6rFRr-
"""

def hex_to_binary(h): 
  table = {'0' : "0000", '1' : "0001", '2' : "0010", '3' : "0011", '4' : "0100", '5' : "0101", '6' : "0110", '7' : "0111", '8' : "1000", 
          '9' : "1001",  'A' : "1010", 'B' : "1011", 'C' : "1100", 'D' : "1101", 'E' : "1110", 'F' : "1111" } 
  binary = "" 
  for i in range(len(h)): 
    key = h[i]
    binary = binary + table[key] 
  return binary

def binary_to_hex(string):
  positions = [8,4,2,1]
  alp = {10:'A',11:'B',12:'C',13:'D',14:'E',15:'F'}
  i = 0
  final_val = ""
  while(i < len(string)):
    bin_val = ""
    bin_val = bin_val + string[i:i+4]
    char = 0
    for j in range(len(bin_val)):
      if(bin_val[j] == '1' ):
        char = char + positions[j]
    if(char < 10):
      final_val = final_val + str(char)
    else:
      final_val = final_val + alp[char]
    i = i + 4
  return final_val


def binary_to_decimal(b):
  d = 0
  i = 0
  while(b!= 0):
    res = b % 10
    d = d + res*(2**i)
    b = int(b/10)
    i = i + 1
  return d

def decimal_to_binary(d):
  b = ""
  i = 0
  while(d!=0):
    res = str(d % 2)
    b = b + (res)
    d = int(d/2)
  b = b [::-1]  # to reverse the string
  b=b.zfill(4)
  return (b)


# --parity bit drop table
PC1 = [57,  49,  41,  33,  25,  17,   9,
        1,  58,  50,  42,  34,  26,  18,
       10,   2,  59,  51,  43,  35,  27,
       19,  11,   3,  60,  52,  44,  36,
       63,  55,  47,  39,  31,  23,  15,
        7,  62,  54,  46,  38,  30,  22,
       14,   6,  61,  53,  45,  37,  29,
       21,  13,   5,  28,  20,  12,   4]

# Key- Compression Table : Compression of key from 56 bits to 48 bits
PC2 = [14,  17,  11,  24,   1,   5,
       3,   28,  15,   6,  21,  10,
       23,  19,  12,   4,  26,   8,
       16,   7,  27,  20,  13,   2,
       41,  52,  31,  37,  47,  55,
       30,  40,  51,  45,  33,  48,
       44,  49,  39,  56,  34,  53,
       46,  42,  50,  36,  29,  32]

LSHIFT_MAP = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

#  Initial Permutation Table
IP = [58,  50,  42,  34,  26,  18,  10,   2,
      60,  52,  44,  36,  28,  20,  12,   4,
      62,  54,  46,  38,  30,  22,  14,   6,
      64,  56,  48,  40,  32,  24,  16,   8,
      57,  49,  41,  33,  25,  17,   9,   1,
      59,  51,  43,  35,  27,  19,  11,   3,
      61,  53,  45,  37,  29,  21,  13,   5,
      63,  55,  47,  39,  31,  23,  15,   7]

# Expansion Table
E = [32,   1,   2,   3,   4,   5,
      4,   5,   6,   7,   8,   9,
      8,   9,  10,  11,  12,  13,
     12,  13,  14,  15,  16,  17,
     16,  17,  18,  19,  20,  21,
     20,  21,  22,  23,  24,  25,
     24,  25,  26,  27,  28,  29,
     28,  29,  30,  31,  32,   1]

SBOXES = {0:
            [[14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7],
             [ 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8],
             [ 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0],
             [15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13]],
          1:
            [[15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10],
             [ 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5],
             [ 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15],
             [13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9]],
          2:
            [[10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8],
             [13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1],
             [13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7],
             [ 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12]],
          3:
            [[ 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15],
             [13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9],
             [10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4],
             [ 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14]],
          4:
            [[ 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9],
             [14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6],
             [ 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14],
             [11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3]],
          5:
            [[12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11],
             [10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8],
             [ 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6],
             [ 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13]],
          6:
            [[ 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1],
             [13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6],
             [ 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2],
             [ 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12]],
          7:
            [[13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7],
             [ 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2],
             [ 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8],
             [ 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11]]}

# Straight Permutaion Table
P = [16,   7,  20,  21,
     29,  12,  28,  17,
      1,  15,  23,  26,
      5,  18,  31,  10,
      2,   8,  24,  14,
     32,  27,   3,   9,
     19,  13,  30,   6,
     22,  11,   4,  25]

# Final Permutaion Table
IP_INVERSE = [40,   8,  48,  16,  56,  24,  64,  32,
              39,   7,  47,  15,  55,  23,  63,  31,
              38,   6,  46,  14,  54,  22,  62,  30,
              37,   5,  45,  13,  53,  21,  61,  29,
              36,   4,  44,  12,  52,  20,  60,  28,
              35,   3,  43,  11,  51,  19,  59,  27,
              34,   2,  42,  10,  50,  18,  58,  26,
              33,   1,  41,   9,  49,  17,  57,  25]


def left_circularshift(binary_string,pos):
  bits_to_shift = binary_string[0:pos]
  left_shifted = binary_string[pos:] + bits_to_shift
  #print(binary_string)
  return left_shifted



def xor(a,b):
  length = max( len(a),len(b))
  xor_output = '1'*length
  for i in range(length):
    if( a[i] == b[i]):
      xor_output = xor_output[:i] + '0' + xor_output[i+1:]

  return xor_output

def permute(binary_string , table):
  
  permutation = "" 
  for i in range(0, len(table)):
    permutation = permutation + binary_string[table[i] - 1] 
  return permutation 

flag =0
encryptround1 = list()
decryptround15 = list()

def encrypt(plain_text, round_key_binary, function): 
    plain_text = hex_to_binary(plain_text) 
    
    
    # Initial Permutation 
    plain_text = permute(plain_text, IP) 
    #print("After inital permutation", binary_to_hex(plain_text)) 
      
    # Splitting 
    left_pt = plain_text[:32] 
    right_pt = plain_text[32:] 
    print("Round ","Left Part   ","Right Part   ","Key ")
    for i in range(0, 16): 
        #  Expansion D-box, expand the 32 bits into 48 bits  
        right_exp = permute(right_pt, E) 
          
        # XOR of Round Key and right expansion  
        xor_r_k = xor(right_exp, round_key_binary[i]) 
        block = []
        for k in range(8):
          block.append(xor_r_k[k*6:(k*6)+6])
        # S-box substitution using s-box table by calculating row and column  
        sbox_str = sbox_subs(block)
          
        sbox_str = permute(sbox_str, P) 
          
        # XOR of left_pt and sbox_str 
        final = xor(left_pt, sbox_str) 
        left_pt = final  
          
        # Swapping till 15 rounds
        if(i != 15): 
            left_pt, right_pt = right_pt, left_pt 
        
        print(i + 1, "  ", binary_to_hex(left_pt), "    ", binary_to_hex(right_pt), "    ", binary_to_hex(round_key_binary[i]))

        if(i ==0 and function == "E"):
            encryptround1.append(binary_to_hex(left_pt))
            encryptround1.append(binary_to_hex(right_pt))

        if(i == 14 and function == "D"):
            
            decryptround15.append(binary_to_hex(right_pt))
            decryptround15.append(binary_to_hex(left_pt))

        #print(encryptround1, decryptround15)
        if( encryptround1 == decryptround15 ):
            global flag
            flag = 1 
        #print(encryptround1, decryptround15)
     
            
    

    #print("Encryption round 1 and decryption round 15 results are identical") 
    # concatenating 
    concat = left_pt + right_pt 
      
    # Final permutaion 
    cipher = permute(concat, IP_INVERSE) 
    return cipher

def pad(s):
  pad_len = abs(len(s) - 64)
  app_st = '0'* pad_len
  s = s + app_st
  return s


def sbox_subs(block):
  sbox_str = ""  
  for j in range(0, 8): 
    row = binary_to_decimal(int(block[j][0] + block[j][5]))
    column = binary_to_decimal(int(block[j][1:5]))
    val = SBOXES[j][row][column] 
    sbox_str = sbox_str + decimal_to_binary(val) 
  return sbox_str


def decrypt(cipher,round_key_binary):
  round_key_rev = round_key_binary[::-1]
  plain_text  = encrypt(cipher, round_key_rev, "D") 
  plain_text = binary_to_hex(plain_text)
  return plain_text 

def DES(plain_text,key):
  round_key_binary =  key_gen(key)
  print("Encryption") 
  cipher = encrypt(plain_text, round_key_binary, "E")
  cipher = binary_to_hex(cipher) 
  print("Cipher Text : ",cipher) 
  
  print("Decryption") 
  d_plain_text = decrypt(cipher, round_key_binary)
  print("Plain Text : ",d_plain_text) 

  if( flag == 1):
    print("Encryption round 1 and decryption round 15 results are identical")
  return d_plain_text

def key_gen(key):
  round_key_binary = []
  key = hex_to_binary(key)
  key = permute(key, PC1)
  left_pt = key[:28]    
  right_pt = key[28:] 
  for i in range(0, 16): 
    # Shifting the bits 
    left_pt = left_circularshift(left_pt, LSHIFT_MAP[i]) 
    right_pt = left_circularshift(right_pt, LSHIFT_MAP[i]) 
      
    # Combine left and right part
    concat = left_pt + right_pt 
      
    # Compression of key from 56 to 48 bits  
    round_key = permute(concat, PC2) 
   
    round_key_binary.append(round_key) 
  return round_key_binary

pt1 = "123456ABCD132536"
key1 = "AABB09182736CCDD"
output_pt1 = DES(pt1,key1)
if(output_pt1 == pt1):
  print("DES Successful, output plaintest and input plaintext match")

pt2 = "0000000000000000"
key2 = "22234512987ABB23"
output_pt2 = DES(pt2,key2)
if(output_pt2 == pt2):
  print("DES Successful, output plaintest and input plaintext match")